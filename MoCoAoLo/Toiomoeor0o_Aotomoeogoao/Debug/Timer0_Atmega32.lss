
Timer0_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  0000035e  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000088  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000646  00000000  00000000  00000416  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000276  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ad  00000000  00000000  00000cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e8  00000000  00000000  00000f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000003b0  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000b3  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000058  00000000  00000000  000014cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_10>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__vector_11>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	ff 00       	.word	0x00ff	; ????
  56:	09 01       	movw	r0, r18
  58:	13 01       	movw	r2, r6
  5a:	1d 01       	movw	r2, r26
  5c:	27 01       	movw	r4, r14
  5e:	31 01       	movw	r6, r2
  60:	3b 01       	movw	r6, r22
  62:	45 01       	movw	r8, r10

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	a6 36       	cpi	r26, 0x66	; 102
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <main>
  84:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <__vector_11>:

#include "Timer0_Test_Cases.h"
INT16U OVF_count=0;
INT16U COMP_count=0;

ISR(TIMER0_OVF_vect){
  8c:	1f 92       	push	r1
  8e:	0f 92       	push	r0
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	0f 92       	push	r0
  94:	11 24       	eor	r1, r1
  96:	8f 93       	push	r24
		TCNT0=t0_conf_struct.TCNT0_value;
  98:	80 91 65 00 	lds	r24, 0x0065
  9c:	82 bf       	out	0x32, r24	; 50
		//SET_BIT(PORTB,6);
		//PORTA=TCNT0;	
}
  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <__vector_10>:

ISR(TIMER0_COMP_vect){
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
		//CLEAR_BIT(PORTB,6);
}
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <PWM>:

void PWM(void){					/**************************el ON period feha error 0.07  ON=0.47 ms not 0.4 ms !**********************************/
	DDRB=0xff;//port b output
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	87 bb       	out	0x17, r24	; 23
	DDRA=0xff;//port a output
  c2:	8a bb       	out	0x1a, r24	; 26
	CLEAR_BIT(DDRB,2);//PB2 is input
  c4:	ba 98       	cbi	0x17, 2	; 23
	SET_BIT(PORTB,2);//set pull up resistor on PB2
  c6:	c2 9a       	sbi	0x18, 2	; 24
	//timer0_configuration_struct * t0_conf_struct=(timer0_configuration_struct*) malloc( sizeof(timer0_configuration_struct) );
	
	t0_conf_struct.pwm_mode=t0_pwm_mode;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	80 93 60 00 	sts	0x0060, r24
	t0_conf_struct.mode_of_operation=t0_fast_pwm_mode;
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	80 93 61 00 	sts	0x0061, r24
	t0_conf_struct.compare_output_mode=t0_clear_OC0;
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	80 93 62 00 	sts	0x0062, r24
	t0_conf_struct.clock_select=t0_clk_1024;//8M/1024 MHZ
  da:	85 e0       	ldi	r24, 0x05	; 5
  dc:	80 93 63 00 	sts	0x0063, r24
	t0_conf_struct.OCR0_value=102;
  e0:	86 e6       	ldi	r24, 0x66	; 102
  e2:	80 93 64 00 	sts	0x0064, r24
	t0_conf_struct.TCNT0_value=99;
  e6:	83 e6       	ldi	r24, 0x63	; 99
  e8:	80 93 65 00 	sts	0x0065, r24
	
	TIMER0_init(t0_conf_struct);
  ec:	40 91 60 00 	lds	r20, 0x0060
  f0:	50 91 61 00 	lds	r21, 0x0061
  f4:	60 91 62 00 	lds	r22, 0x0062
  f8:	70 91 63 00 	lds	r23, 0x0063
  fc:	80 91 64 00 	lds	r24, 0x0064
 100:	90 91 65 00 	lds	r25, 0x0065
 104:	0e 94 8c 00 	call	0x118	; 0x118 <TIMER0_init>
	sei();//set global interrupt
 108:	78 94       	sei
	TIMER0_start();
 10a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <TIMER0_start>
	while(1)
    {
		if ( ! GET_BIT(PINB,2)){
 10e:	b2 99       	sbic	0x16, 2	; 22
 110:	fe cf       	rjmp	.-4      	; 0x10e <PWM+0x50>
			//TIMER0_stop();
			TIMER0_reset();
 112:	0e 94 4f 01 	call	0x29e	; 0x29e <TIMER0_reset>
 116:	fb cf       	rjmp	.-10     	; 0x10e <PWM+0x50>

00000118 <TIMER0_init>:
 * Created: Wednesday-11-Jan 6:17:01 PM
 *  Author: mohanad1
 */ 
#include "Timer0.h"

void TIMER0_init(timer0_configuration_struct t0_conf_struct){
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	00 d0       	rcall	.+0      	; 0x11e <TIMER0_init+0x6>
 11e:	00 d0       	rcall	.+0      	; 0x120 <TIMER0_init+0x8>
 120:	00 d0       	rcall	.+0      	; 0x122 <TIMER0_init+0xa>
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	49 83       	std	Y+1, r20	; 0x01
 128:	5a 83       	std	Y+2, r21	; 0x02
 12a:	6b 83       	std	Y+3, r22	; 0x03
 12c:	7c 83       	std	Y+4, r23	; 0x04
 12e:	8d 83       	std	Y+5, r24	; 0x05
 130:	9e 83       	std	Y+6, r25	; 0x06
	if (t0_conf_struct.pwm_mode == 1)//t0_pwm_mode = 1//The FOC0 bit is only active when the WGM00 bit specifies a non-PWM mode.
	{
		CLEAR_BIT(TCCR0,FOC0);//FOC0 must be set to zero when TCCR0 is written when operating in PWM mode.
	}
	*/
	switch(t0_conf_struct.mode_of_operation)
 132:	51 30       	cpi	r21, 0x01	; 1
 134:	69 f0       	breq	.+26     	; 0x150 <TIMER0_init+0x38>
 136:	28 f0       	brcs	.+10     	; 0x142 <TIMER0_init+0x2a>
 138:	52 30       	cpi	r21, 0x02	; 2
 13a:	89 f0       	breq	.+34     	; 0x15e <TIMER0_init+0x46>
 13c:	53 30       	cpi	r21, 0x03	; 3
 13e:	b1 f0       	breq	.+44     	; 0x16c <TIMER0_init+0x54>
 140:	1b c0       	rjmp	.+54     	; 0x178 <TIMER0_init+0x60>
	{
		case t0_normal_mode://t0_normal_mode=0
			CLEAR_BIT(TCCR0,WGM00);//0
 142:	83 b7       	in	r24, 0x33	; 51
 144:	8f 7b       	andi	r24, 0xBF	; 191
 146:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0,WGM01);//0			
 148:	83 b7       	in	r24, 0x33	; 51
 14a:	87 7f       	andi	r24, 0xF7	; 247
 14c:	83 bf       	out	0x33, r24	; 51
			break;
 14e:	14 c0       	rjmp	.+40     	; 0x178 <TIMER0_init+0x60>
			
		case t0_phase_correct_pwm_mode://t0_phase_correct_pwm_mode=1
			CLEAR_BIT(TCCR0,WGM01);//0
 150:	83 b7       	in	r24, 0x33	; 51
 152:	87 7f       	andi	r24, 0xF7	; 247
 154:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,WGM00);//1
 156:	83 b7       	in	r24, 0x33	; 51
 158:	80 64       	ori	r24, 0x40	; 64
 15a:	83 bf       	out	0x33, r24	; 51
			break;
 15c:	0d c0       	rjmp	.+26     	; 0x178 <TIMER0_init+0x60>
			
		case t0_clear_timer_on_compare_match_mode://t0_clear_timer_on_compare_match_mode=2
			SET_BIT(TCCR0,WGM01);//1
 15e:	83 b7       	in	r24, 0x33	; 51
 160:	88 60       	ori	r24, 0x08	; 8
 162:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0,WGM00);//0
 164:	83 b7       	in	r24, 0x33	; 51
 166:	8f 7b       	andi	r24, 0xBF	; 191
 168:	83 bf       	out	0x33, r24	; 51
			break;
 16a:	06 c0       	rjmp	.+12     	; 0x178 <TIMER0_init+0x60>
			
		case t0_fast_pwm_mode://t0_fast_pwm_mode=3
			SET_BIT(TCCR0,WGM01);//1
 16c:	83 b7       	in	r24, 0x33	; 51
 16e:	88 60       	ori	r24, 0x08	; 8
 170:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,WGM00);//1
 172:	83 b7       	in	r24, 0x33	; 51
 174:	80 64       	ori	r24, 0x40	; 64
 176:	83 bf       	out	0x33, r24	; 51
			break;		
	}
	switch(t0_conf_struct.compare_output_mode)
 178:	8b 81       	ldd	r24, Y+3	; 0x03
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	69 f0       	breq	.+26     	; 0x198 <TIMER0_init+0x80>
 17e:	28 f0       	brcs	.+10     	; 0x18a <TIMER0_init+0x72>
 180:	82 30       	cpi	r24, 0x02	; 2
 182:	89 f0       	breq	.+34     	; 0x1a6 <TIMER0_init+0x8e>
 184:	83 30       	cpi	r24, 0x03	; 3
 186:	b1 f0       	breq	.+44     	; 0x1b4 <TIMER0_init+0x9c>
 188:	1b c0       	rjmp	.+54     	; 0x1c0 <TIMER0_init+0xa8>
	{
		case t0_OC0_disconnected://t0_OC0_disconnected=0
			CLEAR_BIT(TCCR0,COM01);//0
 18a:	83 b7       	in	r24, 0x33	; 51
 18c:	8f 7d       	andi	r24, 0xDF	; 223
 18e:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0,COM00);//0
 190:	83 b7       	in	r24, 0x33	; 51
 192:	8f 7e       	andi	r24, 0xEF	; 239
 194:	83 bf       	out	0x33, r24	; 51
			break;
 196:	14 c0       	rjmp	.+40     	; 0x1c0 <TIMER0_init+0xa8>
			
		case t0_toggle_OC0://t0_toggle_OC0=1
			CLEAR_BIT(TCCR0,COM01);//0
 198:	83 b7       	in	r24, 0x33	; 51
 19a:	8f 7d       	andi	r24, 0xDF	; 223
 19c:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,COM00);//1
 19e:	83 b7       	in	r24, 0x33	; 51
 1a0:	80 61       	ori	r24, 0x10	; 16
 1a2:	83 bf       	out	0x33, r24	; 51
			break;
 1a4:	0d c0       	rjmp	.+26     	; 0x1c0 <TIMER0_init+0xa8>
			
		case t0_clear_OC0://t0_clear_OC0=2
			SET_BIT(TCCR0,COM01);//1
 1a6:	83 b7       	in	r24, 0x33	; 51
 1a8:	80 62       	ori	r24, 0x20	; 32
 1aa:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0,COM00);//0
 1ac:	83 b7       	in	r24, 0x33	; 51
 1ae:	8f 7e       	andi	r24, 0xEF	; 239
 1b0:	83 bf       	out	0x33, r24	; 51
			break;
 1b2:	06 c0       	rjmp	.+12     	; 0x1c0 <TIMER0_init+0xa8>
			
		case t0_set_OC0://t0_set_OC0=3
			SET_BIT(TCCR0,COM01);//1
 1b4:	83 b7       	in	r24, 0x33	; 51
 1b6:	80 62       	ori	r24, 0x20	; 32
 1b8:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,COM00);//1
 1ba:	83 b7       	in	r24, 0x33	; 51
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	83 bf       	out	0x33, r24	; 51
			break;
	}
	SET_BIT(TIMSK,OCIE0);//timer0/counter0 output compare match interrupt enable
 1c0:	89 b7       	in	r24, 0x39	; 57
 1c2:	82 60       	ori	r24, 0x02	; 2
 1c4:	89 bf       	out	0x39, r24	; 57
	SET_BIT(TIMSK,TOIE0);//timer0/counter0 overflow interrupt enable
 1c6:	89 b7       	in	r24, 0x39	; 57
 1c8:	81 60       	ori	r24, 0x01	; 1
 1ca:	89 bf       	out	0x39, r24	; 57
	TCNT0=t0_conf_struct.TCNT0_value;
 1cc:	8e 81       	ldd	r24, Y+6	; 0x06
 1ce:	82 bf       	out	0x32, r24	; 50
	OCR0=t0_conf_struct.OCR0_value;
 1d0:	8d 81       	ldd	r24, Y+5	; 0x05
 1d2:	8c bf       	out	0x3c, r24	; 60

	
	return;
}
 1d4:	26 96       	adiw	r28, 0x06	; 6
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	f8 94       	cli
 1da:	de bf       	out	0x3e, r29	; 62
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <TIMER0_start>:
void TIMER0_start(void){
	switch (t0_conf_struct.clock_select)
 1e6:	80 91 63 00 	lds	r24, 0x0063
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	88 30       	cpi	r24, 0x08	; 8
 1ee:	91 05       	cpc	r25, r1
 1f0:	08 f0       	brcs	.+2      	; 0x1f4 <TIMER0_start+0xe>
 1f2:	54 c0       	rjmp	.+168    	; 0x29c <TIMER0_start+0xb6>
 1f4:	fc 01       	movw	r30, r24
 1f6:	e6 5d       	subi	r30, 0xD6	; 214
 1f8:	ff 4f       	sbci	r31, 0xFF	; 255
 1fa:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__tablejump2__>
	{
		case t0_no_clock_source://t0_no_clock_source = 0
		
		CLEAR_BIT(TCCR0,CS02);	//0
 1fe:	83 b7       	in	r24, 0x33	; 51
 200:	8b 7f       	andi	r24, 0xFB	; 251
 202:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0,CS01);	//0
 204:	83 b7       	in	r24, 0x33	; 51
 206:	8d 7f       	andi	r24, 0xFD	; 253
 208:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0,CS00);	//0
 20a:	83 b7       	in	r24, 0x33	; 51
 20c:	8e 7f       	andi	r24, 0xFE	; 254
 20e:	83 bf       	out	0x33, r24	; 51
		break;
 210:	08 95       	ret
		case t0_clk_no_prescale://t0_clk_no_prescale = 1
		
		CLEAR_BIT(TCCR0,CS02);	//0
 212:	83 b7       	in	r24, 0x33	; 51
 214:	8b 7f       	andi	r24, 0xFB	; 251
 216:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0,CS01);	//0
 218:	83 b7       	in	r24, 0x33	; 51
 21a:	8d 7f       	andi	r24, 0xFD	; 253
 21c:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS00);	//1
 21e:	83 b7       	in	r24, 0x33	; 51
 220:	81 60       	ori	r24, 0x01	; 1
 222:	83 bf       	out	0x33, r24	; 51
		break;
 224:	08 95       	ret
		case t0_clk_8://.t0_clk_8 = 2
		CLEAR_BIT(TCCR0,CS02);	//0
 226:	83 b7       	in	r24, 0x33	; 51
 228:	8b 7f       	andi	r24, 0xFB	; 251
 22a:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);	//1
 22c:	83 b7       	in	r24, 0x33	; 51
 22e:	82 60       	ori	r24, 0x02	; 2
 230:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0,CS00);	//0
 232:	83 b7       	in	r24, 0x33	; 51
 234:	8e 7f       	andi	r24, 0xFE	; 254
 236:	83 bf       	out	0x33, r24	; 51
		break;
 238:	08 95       	ret
		
		case t0_clk_64://.t0_clk_64 = 3
		CLEAR_BIT(TCCR0,CS02);	//0
 23a:	83 b7       	in	r24, 0x33	; 51
 23c:	8b 7f       	andi	r24, 0xFB	; 251
 23e:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);	//1
 240:	83 b7       	in	r24, 0x33	; 51
 242:	82 60       	ori	r24, 0x02	; 2
 244:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS00);	//1
 246:	83 b7       	in	r24, 0x33	; 51
 248:	81 60       	ori	r24, 0x01	; 1
 24a:	83 bf       	out	0x33, r24	; 51
		break;
 24c:	08 95       	ret
		
		case t0_clk_256://.t0_clk_256 = 4
		SET_BIT(TCCR0,CS02);	//1
 24e:	83 b7       	in	r24, 0x33	; 51
 250:	84 60       	ori	r24, 0x04	; 4
 252:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0,CS01);	//0
 254:	83 b7       	in	r24, 0x33	; 51
 256:	8d 7f       	andi	r24, 0xFD	; 253
 258:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0,CS00);	//0
 25a:	83 b7       	in	r24, 0x33	; 51
 25c:	8e 7f       	andi	r24, 0xFE	; 254
 25e:	83 bf       	out	0x33, r24	; 51
		break;
 260:	08 95       	ret
		
		case t0_clk_1024://.t0_clk_1024 = 5
		SET_BIT(TCCR0,CS02);	//1
 262:	83 b7       	in	r24, 0x33	; 51
 264:	84 60       	ori	r24, 0x04	; 4
 266:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0,CS01);	//0
 268:	83 b7       	in	r24, 0x33	; 51
 26a:	8d 7f       	andi	r24, 0xFD	; 253
 26c:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS00);	//1
 26e:	83 b7       	in	r24, 0x33	; 51
 270:	81 60       	ori	r24, 0x01	; 1
 272:	83 bf       	out	0x33, r24	; 51
		break;
 274:	08 95       	ret
		
		case t0_external_clk_falling://.t0_external_clk_falling = 6
		SET_BIT(TCCR0,CS02);	//1
 276:	83 b7       	in	r24, 0x33	; 51
 278:	84 60       	ori	r24, 0x04	; 4
 27a:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);	//1
 27c:	83 b7       	in	r24, 0x33	; 51
 27e:	82 60       	ori	r24, 0x02	; 2
 280:	83 bf       	out	0x33, r24	; 51
		CLEAR_BIT(TCCR0,CS00);	//0
 282:	83 b7       	in	r24, 0x33	; 51
 284:	8e 7f       	andi	r24, 0xFE	; 254
 286:	83 bf       	out	0x33, r24	; 51
		break;
 288:	08 95       	ret
		
		case t0_external_clk_rising://.t0_external_clk_rising = 7
		SET_BIT(TCCR0,CS02);	//1
 28a:	83 b7       	in	r24, 0x33	; 51
 28c:	84 60       	ori	r24, 0x04	; 4
 28e:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);	//1
 290:	83 b7       	in	r24, 0x33	; 51
 292:	82 60       	ori	r24, 0x02	; 2
 294:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS00);	//1		
 296:	83 b7       	in	r24, 0x33	; 51
 298:	81 60       	ori	r24, 0x01	; 1
 29a:	83 bf       	out	0x33, r24	; 51
 29c:	08 95       	ret

0000029e <TIMER0_reset>:
	return;
}

void TIMER0_reset(void){
	
	CLEAR_BIT(TCCR0,CS00);	//0 no clk
 29e:	83 b7       	in	r24, 0x33	; 51
 2a0:	8e 7f       	andi	r24, 0xFE	; 254
 2a2:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS01);	//0
 2a4:	83 b7       	in	r24, 0x33	; 51
 2a6:	8d 7f       	andi	r24, 0xFD	; 253
 2a8:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0,CS02);	//0
 2aa:	83 b7       	in	r24, 0x33	; 51
 2ac:	8b 7f       	andi	r24, 0xFB	; 251
 2ae:	83 bf       	out	0x33, r24	; 51
	
	CLEAR_BIT(TIFR,OCF0);//clear output compare interrupt flag
 2b0:	88 b7       	in	r24, 0x38	; 56
 2b2:	8d 7f       	andi	r24, 0xFD	; 253
 2b4:	88 bf       	out	0x38, r24	; 56
	CLEAR_BIT(TIFR,TOV0);//clear overflow interrupt flag
 2b6:	88 b7       	in	r24, 0x38	; 56
 2b8:	8e 7f       	andi	r24, 0xFE	; 254
 2ba:	88 bf       	out	0x38, r24	; 56
	
	CLEAR_BIT(TIMSK,OCIE0);//timer0/counter0 output compare match interrupt disabled
 2bc:	89 b7       	in	r24, 0x39	; 57
 2be:	8d 7f       	andi	r24, 0xFD	; 253
 2c0:	89 bf       	out	0x39, r24	; 57
	CLEAR_BIT(TIMSK,TOIE0);//timer0/counter0 overflow interrupt disabled
 2c2:	89 b7       	in	r24, 0x39	; 57
 2c4:	8e 7f       	andi	r24, 0xFE	; 254
 2c6:	89 bf       	out	0x39, r24	; 57
	
	SET_BIT(SFIOR,PSR10);//Pre-scaler reset timer(0,1)/counter(0,1)
 2c8:	80 b7       	in	r24, 0x30	; 48
 2ca:	81 60       	ori	r24, 0x01	; 1
 2cc:	80 bf       	out	0x30, r24	; 48
	
	TCNT0=0x00;
 2ce:	12 be       	out	0x32, r1	; 50
	OCR0=0x00;
 2d0:	1c be       	out	0x3c, r1	; 60
 2d2:	08 95       	ret

000002d4 <main>:


int main(void){
	
//One_Second();//testing the one second blinking
PWM();//testing the PWM
 2d4:	0e 94 5f 00 	call	0xbe	; 0xbe <PWM>
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <main+0x4>

000002da <__tablejump2__>:
 2da:	ee 0f       	add	r30, r30
 2dc:	ff 1f       	adc	r31, r31

000002de <__tablejump__>:
 2de:	05 90       	lpm	r0, Z+
 2e0:	f4 91       	lpm	r31, Z
 2e2:	e0 2d       	mov	r30, r0
 2e4:	09 94       	ijmp

000002e6 <_exit>:
 2e6:	f8 94       	cli

000002e8 <__stop_program>:
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <__stop_program>
