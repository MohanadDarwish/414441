
External_Interrupts_ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000026a  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800062  00800062  00000300  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002c5  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000165  00000000  00000000  0000064d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001fd  00000000  00000000  000007b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  000009b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f0  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c0  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_2>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  8a:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
volatile unsigned char number=0;
volatile unsigned char i=0;
volatile unsigned char direction=1;//0=up 1=down
volatile unsigned char j=0;

ISR(INT0_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	j=0;
  a4:	10 92 62 00 	sts	0x0062, r1
	while(j<5)
  a8:	80 91 62 00 	lds	r24, 0x0062
  ac:	85 30       	cpi	r24, 0x05	; 5
  ae:	f0 f4       	brcc	.+60     	; 0xec <__vector_1+0x5a>
	{
		PORTA=0xff;
  b0:	9f ef       	ldi	r25, 0xFF	; 255
  b2:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	34 e3       	ldi	r19, 0x34	; 52
  b8:	8c e0       	ldi	r24, 0x0C	; 12
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	30 40       	sbci	r19, 0x00	; 0
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <__vector_1+0x28>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <__vector_1+0x32>
  c4:	00 00       	nop
		_delay_ms(500);
		PORTA=0x00;
  c6:	1b ba       	out	0x1b, r1	; 27
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	34 e3       	ldi	r19, 0x34	; 52
  cc:	8c e0       	ldi	r24, 0x0C	; 12
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	30 40       	sbci	r19, 0x00	; 0
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <__vector_1+0x3c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <__vector_1+0x46>
  d8:	00 00       	nop
		_delay_ms(500);
		j++;
  da:	80 91 62 00 	lds	r24, 0x0062
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 62 00 	sts	0x0062, r24
volatile unsigned char direction=1;//0=up 1=down
volatile unsigned char j=0;

ISR(INT0_vect){
	j=0;
	while(j<5)
  e4:	80 91 62 00 	lds	r24, 0x0062
  e8:	85 30       	cpi	r24, 0x05	; 5
  ea:	18 f3       	brcs	.-58     	; 0xb2 <__vector_1+0x20>
		_delay_ms(500);
		PORTA=0x00;
		_delay_ms(500);
		j++;
	}
}
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	3f 91       	pop	r19
  f2:	2f 91       	pop	r18
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_2>:

ISR(INT1_vect){
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
	direction^=1;
 10c:	90 91 60 00 	lds	r25, 0x0060
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	89 27       	eor	r24, r25
 114:	80 93 60 00 	sts	0x0060, r24
}
 118:	9f 91       	pop	r25
 11a:	8f 91       	pop	r24
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <__vector_3>:
ISR(INT2_vect){
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	8f 93       	push	r24
	
	PORTC+=1;
 132:	85 b3       	in	r24, 0x15	; 21
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	85 bb       	out	0x15, r24	; 21
	if(PORTC==16){
 138:	85 b3       	in	r24, 0x15	; 21
 13a:	80 31       	cpi	r24, 0x10	; 16
 13c:	09 f4       	brne	.+2      	; 0x140 <__vector_3+0x1a>
		PORTC=0;
 13e:	15 ba       	out	0x15, r1	; 21
	}
}
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <RESET_Init>:

void RESET_Init(void){
	cli();	//Clear global interrupt Enable
 14c:	f8 94       	cli
	//RESET interrupt triggered when a low voltage 0V is applied to reset pin.
	//This cause the ATmega32 to reset, that is reboot.
	sei();	//Set global interrupt Enable
 14e:	78 94       	sei
 150:	08 95       	ret

00000152 <INT0_Init>:
}

void INT0_Init(void){
	cli();//Clear global interrupt Enable
 152:	f8 94       	cli
	SET_BIT(GICR,6);//INT0 enable bit=1
 154:	8b b7       	in	r24, 0x3b	; 59
 156:	80 64       	ori	r24, 0x40	; 64
 158:	8b bf       	out	0x3b, r24	; 59
	//INT0 triggered on rising
	SET_BIT(MCUCR,0);//ISC00=1
 15a:	85 b7       	in	r24, 0x35	; 53
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,1);//ISC01=1
 160:	85 b7       	in	r24, 0x35	; 53
 162:	82 60       	ori	r24, 0x02	; 2
 164:	85 bf       	out	0x35, r24	; 53
	sei();//Set global interrupt Enable
 166:	78 94       	sei
 168:	08 95       	ret

0000016a <INT1_Init>:
}

void INT1_Init(void){
	cli();//Clear global interrupt Enable
 16a:	f8 94       	cli
	SET_BIT(GICR,7);//INT1 enable bit=1
 16c:	8b b7       	in	r24, 0x3b	; 59
 16e:	80 68       	ori	r24, 0x80	; 128
 170:	8b bf       	out	0x3b, r24	; 59
	//INT1 triggered on rising
	SET_BIT(MCUCR,2);//ISC10=1
 172:	85 b7       	in	r24, 0x35	; 53
 174:	84 60       	ori	r24, 0x04	; 4
 176:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,3);//ISC11=1
 178:	85 b7       	in	r24, 0x35	; 53
 17a:	88 60       	ori	r24, 0x08	; 8
 17c:	85 bf       	out	0x35, r24	; 53
	sei();//Set global interrupt Enable
 17e:	78 94       	sei
 180:	08 95       	ret

00000182 <INT2_Init>:
}

void INT2_Init(void){
	cli();//Clear global interrupt Enable
 182:	f8 94       	cli
	SET_BIT(GICR,5);//INT2 enable bit=1
 184:	8b b7       	in	r24, 0x3b	; 59
 186:	80 62       	ori	r24, 0x20	; 32
 188:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCSR,6);//ISC2=1 //INT2 triggered on rising
 18a:	84 b7       	in	r24, 0x34	; 52
 18c:	80 64       	ori	r24, 0x40	; 64
 18e:	84 bf       	out	0x34, r24	; 52
	sei();//Set global interrupt Enable
 190:	78 94       	sei
 192:	08 95       	ret

00000194 <main>:
}


int main(void)
{
	DDRA=0xff;//output
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	8a bb       	out	0x1a, r24	; 26
	DDRC=0x0f;//output 4 pins for the 7-Seg
 198:	8f e0       	ldi	r24, 0x0F	; 15
 19a:	84 bb       	out	0x14, r24	; 20
	
	CLEAR_BIT(DDRD,2);// button input
 19c:	8a 98       	cbi	0x11, 2	; 17
	SET_BIT(PORTD,2);//pull up resistor
 19e:	92 9a       	sbi	0x12, 2	; 18
	
	CLEAR_BIT(DDRD,3);// button input
 1a0:	8b 98       	cbi	0x11, 3	; 17
	SET_BIT(PORTD,3);//pull up resistor
 1a2:	93 9a       	sbi	0x12, 3	; 18
	
	CLEAR_BIT(DDRB,2);// button input
 1a4:	ba 98       	cbi	0x17, 2	; 23
	SET_BIT(PORTB,2);//pull up resistor
 1a6:	c2 9a       	sbi	0x18, 2	; 24
	
	RESET_Init();
 1a8:	0e 94 a6 00 	call	0x14c	; 0x14c <RESET_Init>
	INT0_Init();
 1ac:	0e 94 a9 00 	call	0x152	; 0x152 <INT0_Init>
	INT1_Init();
 1b0:	0e 94 b5 00 	call	0x16a	; 0x16a <INT1_Init>
	INT2_Init();	
 1b4:	0e 94 c1 00 	call	0x182	; 0x182 <INT2_Init>
					direction=0;//direc. => up
				}
			}
			else if( (i >0) && (direction==0) )
			{
				number=(1<<i);
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
				PORTA=number;
				_delay_ms(200);
				i--;
				if(i==0)
				{
					direction=1;//direc. => down
 1bc:	41 e0       	ldi	r20, 0x01	; 1
	INT0_Init();
	INT1_Init();
	INT2_Init();	
    while(1)
    {
			if( (i <8) && (direction==1) )
 1be:	80 91 63 00 	lds	r24, 0x0063
 1c2:	88 30       	cpi	r24, 0x08	; 8
 1c4:	30 f5       	brcc	.+76     	; 0x212 <main+0x7e>
 1c6:	80 91 60 00 	lds	r24, 0x0060
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	11 f5       	brne	.+68     	; 0x212 <main+0x7e>
			{
				number=(1<<i);
 1ce:	80 91 63 00 	lds	r24, 0x0063
 1d2:	b9 01       	movw	r22, r18
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <main+0x46>
 1d6:	66 0f       	add	r22, r22
 1d8:	77 1f       	adc	r23, r23
 1da:	8a 95       	dec	r24
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <main+0x42>
 1de:	60 93 64 00 	sts	0x0064, r22
				PORTA=number;
 1e2:	80 91 64 00 	lds	r24, 0x0064
 1e6:	8b bb       	out	0x1b, r24	; 27
 1e8:	7f ef       	ldi	r23, 0xFF	; 255
 1ea:	81 ee       	ldi	r24, 0xE1	; 225
 1ec:	94 e0       	ldi	r25, 0x04	; 4
 1ee:	71 50       	subi	r23, 0x01	; 1
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <main+0x5a>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <main+0x64>
 1f8:	00 00       	nop
				_delay_ms(200);
				i++;
 1fa:	80 91 63 00 	lds	r24, 0x0063
 1fe:	8f 5f       	subi	r24, 0xFF	; 255
 200:	80 93 63 00 	sts	0x0063, r24
				if(i==7)
 204:	80 91 63 00 	lds	r24, 0x0063
 208:	87 30       	cpi	r24, 0x07	; 7
 20a:	c9 f6       	brne	.-78     	; 0x1be <main+0x2a>
				{
					direction=0;//direc. => up
 20c:	10 92 60 00 	sts	0x0060, r1
 210:	d6 cf       	rjmp	.-84     	; 0x1be <main+0x2a>
				}
			}
			else if( (i >0) && (direction==0) )
 212:	80 91 63 00 	lds	r24, 0x0063
 216:	88 23       	and	r24, r24
 218:	91 f2       	breq	.-92     	; 0x1be <main+0x2a>
 21a:	80 91 60 00 	lds	r24, 0x0060
 21e:	81 11       	cpse	r24, r1
 220:	ce cf       	rjmp	.-100    	; 0x1be <main+0x2a>
			{
				number=(1<<i);
 222:	80 91 63 00 	lds	r24, 0x0063
 226:	b9 01       	movw	r22, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <main+0x9a>
 22a:	66 0f       	add	r22, r22
 22c:	77 1f       	adc	r23, r23
 22e:	8a 95       	dec	r24
 230:	e2 f7       	brpl	.-8      	; 0x22a <main+0x96>
 232:	60 93 64 00 	sts	0x0064, r22
				PORTA=number;
 236:	80 91 64 00 	lds	r24, 0x0064
 23a:	8b bb       	out	0x1b, r24	; 27
 23c:	7f ef       	ldi	r23, 0xFF	; 255
 23e:	81 ee       	ldi	r24, 0xE1	; 225
 240:	94 e0       	ldi	r25, 0x04	; 4
 242:	71 50       	subi	r23, 0x01	; 1
 244:	80 40       	sbci	r24, 0x00	; 0
 246:	90 40       	sbci	r25, 0x00	; 0
 248:	e1 f7       	brne	.-8      	; 0x242 <main+0xae>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <main+0xb8>
 24c:	00 00       	nop
				_delay_ms(200);
				i--;
 24e:	80 91 63 00 	lds	r24, 0x0063
 252:	81 50       	subi	r24, 0x01	; 1
 254:	80 93 63 00 	sts	0x0063, r24
				if(i==0)
 258:	80 91 63 00 	lds	r24, 0x0063
 25c:	81 11       	cpse	r24, r1
 25e:	af cf       	rjmp	.-162    	; 0x1be <main+0x2a>
				{
					direction=1;//direc. => down
 260:	40 93 60 00 	sts	0x0060, r20
 264:	ac cf       	rjmp	.-168    	; 0x1be <main+0x2a>

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
